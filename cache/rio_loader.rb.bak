RIO_ROOT_PATH = File.join(File.dirname(__FILE__))
SUPPORT_PATH = File.join(File.dirname(__FILE__))
CONTROL_PATH = File.join(SUPPORT_PATH, 'controller')
WEBDIALOG_PATH   = File.join(SUPPORT_PATH, 'webpages/html')
SKETCHUP_CONSOLE.show

begin
 require 'mysql'
rescue LoadError
 Gem::install 'ruby-mysql'
end

begin
 require "sqlite3"
rescue LoadError
 Gem::install 'sqlite3'
end

begin
 require "aws-sdk"
rescue LoadError
 Gem::install 'aws-sdk'
end


def z
	comp=Sketchup.active_model.selection[0]
	if comp
		point = comp.transformation.origin
		vector = Geom::Vector3d.new(0,0,1)
		angle = 90.degrees
		transformation = Geom::Transformation.rotation(point, vector, angle)
		comp.transform!(transformation)
	else
		puts "No component selected"
	end
end


Sketchup.active_model.definitions['Chris'].instances.each{|x| x.visible=false} if Sketchup.active_model.definitions['Chris']

module Decor_Standards
	# json = File.read(RIO_ROOT_PATH+'/'+'schema.json')
	# obj = JSON.parse(json)
	# obj['settings'].each_pair{|key, val|
		# Sketchup.active_model.set_attribute(:rio_settings, key, val)
	# }

	path 			= File.dirname(__FILE__)
	cont_path 		= File.join(path, 'controller')
	ext_lib_path 	= File.join(path, 'external_libs')
	
	#External libraries
	Sketchup::require File.join(ext_lib_path, 'color_picker.rb') #Library for choosing the color.
	Sketchup::require File.join(ext_lib_path, 'ping.rb') #Library for login page check

	#Rio libraries
	Sketchup::require File.join(cont_path, 'login_control.rb')
	Sketchup::require File.join(cont_path, 'load_toolbar.rb')
	Sketchup::require File.join(cont_path, 'working_drawing.rb')
	Sketchup::require File.join(cont_path, 'aws_database.rb')
	Sketchup::require File.join(cont_path, 'aws_downloader.rb')
	Sketchup::require File.join(cont_path, 'dp_core.rb')
	Sketchup::require File.join(cont_path, 'add_attribute.rb')
	Sketchup::require File.join(cont_path, 'create_comp.rb')
	Sketchup::require File.join(cont_path, 'home_file.rb')
	Sketchup::require File.join(cont_path, 'export_html.rb')
	Sketchup::require File.join(cont_path, 'dp_core.rb')
	Sketchup::require File.join(cont_path, 'multi_room.rb')
	Sketchup::require File.join(cont_path, 'room_tool.rb')
	Sketchup::require File.join(cont_path, 'wall_tool.rb')
	Sketchup::require File.join(cont_path, 'laminate.rb')
	Sketchup::require File.join(cont_path, 'multi_room_preprocess.rb')
	Sketchup::require File.join(cont_path, 'multi_room_door.rb')
	Sketchup::require File.join(cont_path, 'schema.rb')
	
	DP::create_layers
end

class MyEntitiesObserver < Sketchup::EntitiesObserver
	def onElementAdded(entities, entity)

		if entity.is_a?(Sketchup::ComponentInstance) && !entity.deleted?
			dict = nil
			if entity.definition.attribute_dictionaries
				dict = entity.definition.attribute_dictionaries['rio_atts']
			elsif entity.attribute_dictionaries
				dict = entity.attribute_dictionaries['rio_atts']
			end

			
			if dict
				entity.layer = 'DP_Comp_layer'
				entity.set_attribute :rio_atts, 'rio_comp', true
				space_name = entity.definition.get_attribute(:rio_atts, 'space_name', space_name)
                entity.set_attribute :rio_atts, 'space_name', space_name
				puts "Rio Component Added"


				dict_name='carcase_spec'
				defn  = entity.definition.get_attribute(dict_name, 'attr_product_code')
				entity.set_attribute(dict_name, 'attr_product_code', defn) 
				puts "Rio Component Added"

				puts "Updating all components"
				DP::update_all_room_components
			end
		end
	end
end

#Attach the observer
observer = MyEntitiesObserver.new
Sketchup.active_model.entities.add_observer(observer)
observer.onElementAdded(Sketchup.active_model.entities, nil)

chris_defn = Sketchup.active_model.definitions['Chris']
if chris_defn
    Sketchup.active_model.place_component chris_defn
    Sketchup.active_model.select_tool(nil)
end